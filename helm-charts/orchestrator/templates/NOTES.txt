{{/* Empty line */}}
Helm Release {{ .Release.Name }} installed in namespace {{ .Release.Namespace }}.
{{- $yes := "YES" }}
{{- $no := "NO " }}
{{- $backstageInstalled := $yes }}
{{- $postgresBackstageInstalled := $no }}
{{- $serverlessOperatorInstalled := $no }}
{{- $knativeServingInstalled := $no }}
{{- $knativeEventingInstalled := $no }}
{{- $sonataFlowOperatorInstalled := $no }}
{{- $sonataFlowPlatformInstalled := $no }}
{{- $tektonPipelineInstalled := $no }}
{{- $tektonTaskInstalled := $no }}
{{- $argocdInstalled := $no }}
{{- $timeout := "--timeout=5m" }}

{{- if .Values.serverlessOperator.enabled }}
{{- $unmanagedSubscriptionExists := include "unmanaged-resource-exists" (list "operators.coreos.com/v1alpha1" "Subscription" .Values.serverlessOperator.subscription.namespace "serverless-operator" .Release.Name .Capabilities.APIVersions ) }}
{{- if eq $unmanagedSubscriptionExists "false" }}
{{- $serverlessOperatorInstalled = $yes }}
{{- end }}
{{- end }}

{{- if not .Values.rhdhOperator.enabled }}
  {{- $backstageInstalled = $no}}
{{- end }}

{{- if and $backstageInstalled (lookup "apps/v1" "StatefulSet" .Values.rhdhOperator.targetNamespace "backstage-psql-backstage" ) }}
  {{- $postgresBackstageInstalled = $yes }}
{{- end }}

{{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" "knative-serving" .Release.Name .Capabilities.APIVersions) }}
{{- $unmanagedKnativeEventingExists := include "unmanaged-resource-exists" (list "operator.knative.dev/v1beta1" "KnativeEventing" "knative-eventing" "knative-eventing" .Release.Name .Capabilities.APIVersions ) }}
{{- if and .Values.serverlessOperator.enabled (eq $unmanagedKnativeEventingExists "false") }}
{{- $knativeEventingInstalled = $yes }}
{{- end }}
{{- $unmanagedKnativeServingExists := include "unmanaged-resource-exists" (list "operator.knative.dev/v1beta1" "KnativeServing" "knative-serving" "knative-serving" .Release.Name .Capabilities.APIVersions ) }}
{{- if and .Values.serverlessOperator.enabled (eq $unmanagedKnativeServingExists "false") }}
{{- $knativeServingInstalled = $yes }}
{{- end }}

{{- if .Values.sonataFlowOperator.enabled }}
{{- $sonataFlowOperatorInstalled = $yes }}
{{- $sonataFlowPlatformInstalled = $yes }}
{{- end }}

{{- if eq "true" (include "install-tekton-pipeline" .) }}
{{- $tektonPipelineInstalled = $yes }}
{{- end }}

{{- if eq "true" (include "install-tekton-task" .) }}
{{- $tektonTaskInstalled = $yes }}
{{- end }}

{{- if eq "true" (include "install-argocd-project" .) }}
{{- $argocdInstalled = $yes }}
{{- end }}

{{- $workflowNamespace := include "get-workflow-namespace" . }}
{{- $gitopsNamespace := include "get-argocd-namespace" . }}


Components                   Installed   Namespace
====================================================================
Backstage                    {{ $backstageInstalled }}        {{ .Values.rhdhOperator.targetNamespace }}
Postgres DB - Backstage      {{ $postgresBackstageInstalled }}        {{ .Values.rhdhOperator.targetNamespace }}
Red Hat Serverless Operator  {{ $serverlessOperatorInstalled }}        {{ .Values.serverlessOperator.subscription.namespace }}
KnativeServing               {{ $knativeServingInstalled }}        knative-serving
KnativeEventing              {{ $knativeEventingInstalled }}        knative-eventing
SonataFlow Operator          {{ $sonataFlowOperatorInstalled }}        {{ .Values.sonataFlowOperator.subscription.namespace }}
SonataFlowPlatform           {{ $sonataFlowPlatformInstalled }}        {{ $workflowNamespace }}
Data Index Service           {{ $sonataFlowPlatformInstalled }}        {{ $workflowNamespace }}
Job Service                  {{ $sonataFlowPlatformInstalled }}        {{ $workflowNamespace }}
Tekton pipeline              {{ $tektonPipelineInstalled }}        {{ $gitopsNamespace }}
Tekton task                  {{ $tektonTaskInstalled }}        {{ $gitopsNamespace }}
ArgoCD project               {{ $argocdInstalled }}        {{ $gitopsNamespace }}
{{/* Empty line */}}
====================================================================
Prerequisites check:
{{- if not (.Capabilities.APIVersions.Has "tekton.dev/v1/Task") }}
WARN: CRD for tekton.dev/v1/Task is not installed
{{- else }}
The required CRD tekton.dev/v1beta1/Task is already installed.
{{- end }}
{{- if not (.Capabilities.APIVersions.Has "tekton.dev/v1/Pipeline") }}
WARN: CRD for tekton.dev/v1/Pipeline is not installed
{{- else }}
The required CRD tekton.dev/v1/Pipeline is already installed.
{{- end }}
{{- if not (.Capabilities.APIVersions.Has "argoproj.io/v1alpha1/AppProject") }}
WARN: CRD for argoproj.io/v1alpha1/AppProject is not installed
{{- else }}
The required CRD argoproj.io/v1alpha1/AppProject is already installed.
{{- end }}
====================================================================
{{/* Empty line */}}

Run the following commands to wait until the services are ready:
{{- if eq $serverlessOperatorInstalled $yes }}
  oc wait -n {{ .Values.serverlessOperator.subscription.namespace }} deploy/knative-openshift --for=condition=Available {{ $timeout }}
{{- end }}
{{- if eq $knativeEventingInstalled $yes }}
  oc wait -n knative-eventing knativeeventing/knative-eventing --for=condition=Ready {{ $timeout }}
{{- end }}
{{- if eq $knativeServingInstalled $yes }}
  oc wait -n knative-serving knativeserving/knative-serving --for=condition=Ready {{ $timeout }}
{{- end }}
{{- if eq $sonataFlowOperatorInstalled $yes }}
  oc wait -n {{ .Values.sonataFlowOperator.subscription.namespace }} deploy/logic-operator-rhel8-controller-manager --for=condition=Available {{ $timeout }}
{{- end }}
{{- if eq $sonataFlowPlatformInstalled $yes }}
  oc wait -n {{ $workflowNamespace }} sonataflowplatform/sonataflow-platform --for=condition=Succeed {{ $timeout }}
{{- end }}
{{- if eq $sonataFlowPlatformInstalled $yes }}
  oc wait -n {{ $workflowNamespace }} deploy/sonataflow-platform-data-index-service --for=condition=Available {{ $timeout }}
{{- end }}
{{- if eq $sonataFlowPlatformInstalled $yes }}
  oc wait -n {{ $workflowNamespace }} deploy/sonataflow-platform-jobs-service --for=condition=Available {{ $timeout }}
{{- end }}
{{- if eq $postgresBackstageInstalled $yes }}
  oc wait -n {{ .Values.rhdhOperator.targetNamespace }} pod/backstage-psql-backstage-0 --for=condition=Ready {{ $timeout }}
{{- end }}
{{- if eq $backstageInstalled $yes }}
  oc wait -n {{ .Values.rhdhOperator.targetNamespace }} backstage backstage --for=condition=Deployed=True
  oc wait -n {{ .Values.rhdhOperator.targetNamespace }} deploy/backstage-backstage --for=condition=Available {{ $timeout }}
{{- end }}
{{- if eq $sonataFlowPlatformInstalled $yes }}
  oc get networkpolicy -n {{ $workflowNamespace }}
{{- end }}

In case of a CR deployment failure, check the logs of the pods created by the corresponding job to deploy the failed CRs instance. The jobs are always
deleted after the deployment of the chart is completed.
