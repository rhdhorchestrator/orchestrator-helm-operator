{{- define "backstage-manifest" }}
---
apiVersion: rhdh.redhat.com/v1alpha1
kind: Backstage
metadata:
  name: backstage
  namespace: {{ .Values.rhdhOperator.targetNamespace }}
  annotations:
    "meta.helm.sh/release-name": {{ .Release.Name}}
spec:
  application:
    appConfig:
      configMaps:
        - name: app-config-rhdh
        - name: app-config-rhdh-auth
        - name: app-config-rhdh-catalog
    dynamicPluginsConfigMapName: dynamic-plugins-rhdh
    extraEnvs:
      secrets:
        - name: {{ .Values.rhdhOperator.secretRef.name }}
    replicas: 1
{{- end }}

{{- if .Values.rhdhOperator.enabled }}
  {{- if not .Values.rhdhOperator.secretRef.name }}
    {{- fail "Backstage's secret name defined in 'rhdhOperator.secretRef.name' is required" }}
  {{- end }}
  {{- $secret := lookup "v1" "Secret" .Values.rhdhOperator.targetNamespace .Values.rhdhOperator.secretRef.name }}
  {{- if not $secret }}
    {{- fail (printf "Secret %s not found in namespace %s" .Values.rhdhOperator.secretRef.name .Values.rhdhOperator.targetNamespace ) }}
  {{- end }}
  {{ if not .Values.rhdhOperator.secretRef.backstage.backendSecret }}
    {{ fail printf "Backend secret key not defined in secret '%s' for Backstage. Please ensure that the value key 'rhdhOperator.secretRef.backstage.backendSecret' has been populated and the value matches the key in the secret" .Values.rhdhOperator.secretRef.name }}
  {{- end }}
  {{- if not (dig "data" .Values.rhdhOperator.secretRef.backstage.backendSecret "" $secret) }}
    {{ fail (printf "Backend secret key %s not found in secret '%s' for Backstage. Please ensure that the value key 'rhdhOperator.secretRef.backstage.backendSecret' matches the key in the secret: %s" .Values.rhdhOperator.secretRef.backstage.backendSecret .Values.rhdhOperator.secretRef.name ($secret|toPrettyJson) )}}
  {{- end }}
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: rhdh-operator-group
  namespace: {{ .Values.rhdhOperator.subscription.namespace }}
spec: {}
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: {{ .Values.rhdhOperator.subscription.name }}
  namespace: {{ .Values.rhdhOperator.subscription.namespace }}
spec:
  channel: {{ .Values.rhdhOperator.subscription.channel }}
  installPlanApproval: Automatic
  name: {{ .Values.rhdhOperator.subscription.name }}
  source: {{ .Values.rhdhOperator.subscription.source }}
  sourceNamespace: openshift-marketplace
  {{- if .Values.rhdhOperator.subscription.startingCSV }}
  startingCSV: {{ .Values.rhdhOperator.subscription.startingCSV }}
  {{- end }}
  {{- if .Values.rhdhPlugins.npmRegistry }}
---
apiVersion: v1
kind: Secret
metadata:
  name: dynamic-plugins-npmrc
  namespace: {{ .Values.rhdhOperator.targetNamespace }}
type: Opaque
stringData:
  .npmrc: |
    registry={{ .Values.rhdhPlugins.npmRegistry }}
  {{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh
  namespace: {{ .Values.rhdhOperator.targetNamespace }}
data:
  "app-config-rhdh.yaml": |
    app:
      title: Red Hat Developer Hub
      baseUrl: https://backstage-backstage-{{ .Values.rhdhOperator.targetNamespace }}.{{ include "cluster.domain" . }}
    backend:
      auth:
        externalAccess:
          - type: static
            options:
              token: {{ printf "${%s}" .Values.rhdhOperator.secretRef.backstage.backendSecret }}
              subject: orchestrator
      baseUrl: https://backstage-backstage-{{ .Values.rhdhOperator.targetNamespace }}.{{ include "cluster.domain" . }}
      csp:
        script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
        script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
        connect-src: ["'self'", 'http:', 'https:', 'data:']
      cors:
        origin: https://backstage-backstage-{{ .Values.rhdhOperator.targetNamespace }}.{{ include "cluster.domain" . }}
      database:
        client: pg
        connection:
          password: ${POSTGRESQL_ADMIN_PASSWORD}
          user: ${POSTGRES_USER}
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
    {{- if and .Values.argocd.enabled
          ( and
              (and (.Values.rhdhOperator.secretRef.argocd.url) (dig "data" .Values.rhdhOperator.secretRef.argocd.url "" $secret ) )
              (and (.Values.rhdhOperator.secretRef.argocd.username) (dig "data" .Values.rhdhOperator.secretRef.argocd.password "" $secret) )
          )
    }}
    argocd:
      appLocatorMethods:
      - instances:
        - name: main
          url: {{ printf "${%s}" .Values.rhdhOperator.secretRef.argocd.url }}
          username: {{ printf "${%s}" .Values.rhdhOperator.secretRef.argocd.username }}
          password: {{ printf "${%s}" .Values.rhdhOperator.secretRef.argocd.password }}
        type: config
    {{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dynamic-plugins-rhdh
  namespace: {{ .Values.rhdhOperator.targetNamespace }}
data:
  "dynamic-plugins.yaml": |
    includes:
      - dynamic-plugins.default.yaml
    plugins:
  {{- if and (and .Values.rhdhOperator.secretRef.k8s.clusterToken (dig "data" .Values.rhdhOperator.secretRef.k8s.clusterToken "" $secret ) )
             (and .Values.rhdhOperator.secretRef.k8s.clusterUrl   (dig "data" .Values.rhdhOperator.secretRef.k8s.clusterUrl "" $secret ) ) }}
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
        pluginConfig:
          kubernetes:
            customResources:
              - group: 'tekton.dev'
                apiVersion: 'v1'
                plural: 'pipelines'
              - group: 'tekton.dev'
                apiVersion: 'v1'
                plural: 'pipelineruns'
              - group: 'tekton.dev'
                apiVersion: 'v1'
                plural: 'taskruns'
              - group: 'route.openshift.io'
                apiVersion: 'v1'
                plural: 'routes'
            serviceLocatorMethod:
              type: 'multiTenant'
            clusterLocatorMethods:
              - type: 'config'
                clusters:
                  - name: 'Default Cluster'
                    url: {{ printf "${%s}" .Values.rhdhOperator.secretRef.k8s.clusterUrl }}
                    authProvider: 'serviceAccount'
                    skipTLSVerify: true
                    serviceAccountToken: {{ printf "${%s}" .Values.rhdhOperator.secretRef.k8s.clusterToken }}
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
    {{- if .Values.tekton.enabled }}
      - package: ./dynamic-plugins/dist/backstage-community-plugin-tekton
        disabled: false
    {{- end }}
  {{- end }}
  {{- if and .Values.argocd.enabled
        ( and
            (and (.Values.rhdhOperator.secretRef.argocd.url) (dig "data" .Values.rhdhOperator.secretRef.argocd.url "" $secret ) )
            (and (.Values.rhdhOperator.secretRef.argocd.username) (dig "data" .Values.rhdhOperator.secretRef.argocd.password "" $secret) )
        )
  }}
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
  {{- end }}
      - disabled: false
        package: "{{ .Values.rhdhPlugins.scope }}/{{ .Values.rhdhPlugins.orchestratorBackend.package }}"
        integrity: {{ .Values.rhdhPlugins.orchestratorBackend.integrity }}
        pluginConfig:
          orchestrator:
            dataIndexService:
              url: http://sonataflow-platform-data-index-service.{{- include "get-workflow-namespace" . }}
      - disabled: false
        package: "{{ .Values.rhdhPlugins.scope }}/{{ .Values.rhdhPlugins.orchestrator.package }}"
        integrity: {{ .Values.rhdhPlugins.orchestrator.integrity }}
        pluginConfig:
          dynamicPlugins:
            frontend:
              red-hat-developer-hub.backstage-plugin-orchestrator:
                appIcons:
                  - importName: OrchestratorIcon
                    module: OrchestratorPlugin
                    name: orchestratorIcon
                dynamicRoutes:
                  - importName: OrchestratorPage
                    menuItem:
                      icon: orchestratorIcon
                      text: Orchestrator
                    module: OrchestratorPlugin
                    path: /orchestrator
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-notifications
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage.plugin-notifications:
                dynamicRoutes:
                  - importName: NotificationsPage
                    menuItem:
                      config:
                        props:
                          titleCounterEnabled: true
                          webNotificationsEnabled: false
                      importName: NotificationsSidebarItem
                    path: /notifications
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-signals
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage.plugin-signals: {}
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-notifications-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-signals-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-github-dynamic
  {{- if and .Values.rhdhPlugins.notificationsEmail.enabled
        ( and (.Values.rhdhOperator.secretRef.notificationsEmail.hostname) (dig "data" .Values.rhdhOperator.secretRef.notificationsEmail.hostname "" $secret ) )
  }}
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-notifications-backend-module-email-dynamic
        pluginConfig:
          notifications:
            processors:
              email:
                transportConfig:
                  transport: smtp
                  hostname: {{ printf "${%s}" .Values.rhdhOperator.secretRef.notificationsEmail.hostname }}
                  port: {{ .Values.rhdhPlugins.notificationsEmail.port }}
                  secure: false
                {{- if .Values.rhdhOperator.secretRef.notificationsEmail.username }}
                  username: {{ printf "${%s}" .Values.rhdhOperator.secretRef.notificationsEmail.username }}
                {{- end}}
                {{- if .Values.rhdhOperator.secretRef.notificationsEmail.password }}
                  password: {{ printf "${%s}" .Values.rhdhOperator.secretRef.notificationsEmail.password }}
                {{- end}}
                sender: {{ .Values.rhdhPlugins.notificationsEmail.sender }}
                {{- if .Values.rhdhPlugins.notificationsEmail.replyTo }}
                replyTo: {{ .Values.rhdhPlugins.notificationsEmail.replyTo }}
                {{- end}}
                broadcastConfig:
                  receiver: "none"
                concurrencyLimit: 10
                cache:
                  ttl:
                    days: 1
  {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-rhdh-auth
  namespace: {{ .Values.rhdhOperator.targetNamespace }}
data:
  app-config-auth.gh.yaml: |
  {{- if and .Values.rhdhOperator.secretRef.github.token (dig "data" .Values.rhdhOperator.secretRef.github.token "" $secret) }}
    integrations:
      github:
        - host: github.com
          token: {{ printf "${%s}" .Values.rhdhOperator.secretRef.github.token }}
  {{- end }}
   {{- if and (and .Values.rhdhOperator.secretRef.gitlab.token (dig "data" .Values.rhdhOperator.secretRef.gitlab.token "" $secret) )
             (and .Values.rhdhOperator.secretRef.gitlab.host (dig "data" .Values.rhdhOperator.secretRef.gitlab.host "" $secret  ) ) }}
      gitlab:
        - host: {{ printf "${%s}" .Values.rhdhOperator.secretRef.gitlab.host }}
          token: {{ printf "${%s}" .Values.rhdhOperator.secretRef.gitlab.token }}
          apiBaseUrl: https://{{ printf "${%s}" .Values.rhdhOperator.secretRef.gitlab.host }}/api/v4
  {{- end }}
  {{- if and .Values.rhdhOperator.secretRef.github.token (dig "data" .Values.rhdhOperator.secretRef.github.token "" $secret) }}
    auth:
      environment: development
  {{- end }}
      providers:
  {{- if and (and .Values.rhdhOperator.secretRef.github.clientId (dig "data" .Values.rhdhOperator.secretRef.github.clientId "" $secret) )
             (and .Values.rhdhOperator.secretRef.github.clientSecret  (dig "data" .Values.rhdhOperator.secretRef.github.clientSecret "" $secret  ) ) }}
        github:
          development:
            clientId: {{ printf "${%s}" .Values.rhdhOperator.secretRef.github.clientId }}
            clientSecret: {{ printf "${%s}" .Values.rhdhOperator.secretRef.github.clientSecret }}
  {{- end }}
  {{- if .Values.rhdhOperator.enableGuestProvider }}
        guest:
          dangerouslyAllowOutsideDevelopment: true
          userEntityRef: user:default/guest
  {{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh-catalog
  namespace: {{ .Values.rhdhOperator.targetNamespace }}
data:
  "app-config-catalog.yaml": |
    catalog:
      rules:
        - allow:
            [
              Component,
              System,
              Group,
              Resource,
              Location,
              Template,
              API,
              User,
              Domain,
            ]
      locations:
      {{- if .Values.rhdhOperator.enableGuestProvider }}
        - type: url
          target: https://github.com/rhdhorchestrator/orchestrator-helm-chart/blob/main/resources/users.yaml
      {{- end }}
        - type: url
          target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/{{ .Values.rhdhOperator.catalogBranch }}/entities/workflow-resources.yaml
        - type: url
          target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/{{ .Values.rhdhOperator.catalogBranch }}/scaffolder-templates/github-workflows/basic-workflow/template.yaml
        - type: url
          target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/{{ .Values.rhdhOperator.catalogBranch }}/scaffolder-templates/github-workflows/advanced-workflow/template.yaml
        - type: url
          target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/{{ .Values.rhdhOperator.catalogBranch }}/scaffolder-templates/gitlab-workflows/basic-workflow/template.yaml
        - type: url
          target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/{{ .Values.rhdhOperator.catalogBranch }}/scaffolder-templates/gitlab-workflows/advanced-workflow/template.yaml
        - type: url
          target: https://github.com/redhat-developer/rhdh-plugins/blob/main/workspaces/orchestrator/plugins/orchestrator-common/src/generated/docs/api-doc/orchestrator-api.yaml
{{- end }}
{{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "rhdh.redhat.com/v1alpha1" "Backstage" .Values.rhdhOperator.targetNamespace "backstage" .Release.Name .Capabilities.APIVersions ) }}
{{- if eq $unmanagedNamespaceExists "false" }}
  {{- include "manage-cr-lifecycle-on-action" (dict "release" .Release "apiGroup" "rhdh.redhat.com" "groupVersion" "v1alpha1" "kind" "Backstage" "kinds" "backstages" "targetNamespace" .Values.rhdhOperator.targetNamespace "resourceName" "backstage" "isEnabled" .Values.rhdhOperator.enabled "hasCRDInstalled" (.Capabilities.APIVersions.Has "rhdh.redhat.com/v1alpha1/Backstage") "manifest" (include "backstage-manifest" . | b64enc )) }}
{{- end }}
